name: CI and Release

on:
  push:
    branches:
      - '*'  # Trigger on all branches
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python Environment
        uses: ./.github/setup-environment/action.yml
        with:
          python-version: '3.12'

  format:
    runs-on: ubuntu-latest
    needs: setup  # Dependency on setup job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Ruff Formatting
        run: |
          poetry run ruff format --config pyproject.toml src/

  lint:
    runs-on: ubuntu-latest
    needs: format  # Dependency on format job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Ruff Linting
        run: |
          poetry run ruff check --config pyproject.toml src/

  type-check:
    runs-on: ubuntu-latest
    needs: format  # Dependency on format job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Mypy Type Checking
        run: |
          poetry run mypy --config-file pyproject.toml src/

  test:
    runs-on: ubuntu-latest
    needs: setup  # Ensure setup job has succeeded

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Unit Tests
        run: |
          poetry run pytest

  create_release:
    runs-on: ubuntu-latest
    needs: [ lint, type-check, test ]  # Ensure lint, type-check, and test jobs have succeeded
    if: github.ref == 'refs/heads/main'  # Only run on main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(poetry version --short)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
