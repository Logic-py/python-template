name: CI and Release

on:
  push:
    branches:
      - '*'  # Trigger on all branches
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry and dependencies
        run: |
          # Create virtual environment with Poetry and install dependencies
          if [ ! -d ".venv" ]; then
            pip install poetry
            poetry config virtualenvs.in-project true  # Create the virtual environment in the project directory
            poetry install
          fi

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv  # Cache the virtual environment directory
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

  format:
    runs-on: ubuntu-latest
    needs: setup  # Dependency on setup job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv  # Restore the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Run Ruff Formatting
        run: |
          source .venv/bin/activate
          poetry run ruff format --config pyproject.toml src/

  lint:
    runs-on: ubuntu-latest
    needs: format  # Dependency on format job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv  # Restore the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Run Ruff Linting
        run: |
          source .venv/bin/activate
          poetry run ruff check --config pyproject.toml src/

  type-check:
    runs-on: ubuntu-latest
    needs: format  # Dependency on format job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv  # Restore the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Run Mypy Type Checking
        run: |
          source .venv/bin/activate
          poetry run mypy --config-file pyproject.toml src/

  test:
    runs-on: ubuntu-latest
    needs: setup  # Ensure setup job has succeeded

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv  # Restore the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Run Unit Tests
        run: |
          source .venv/bin/activate
          poetry run pytest

  create_release:
    runs-on: ubuntu-latest
    needs: [ lint, type-check, test ]  # Ensure lint, type-check, and test jobs have succeeded
    if: github.ref == 'refs/heads/main'  # Only run on main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv  # Restore the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Read version from pyproject.toml
        id: get_version
        run: |
          source .venv/bin/activate
          VERSION=$(poetry version --short)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
